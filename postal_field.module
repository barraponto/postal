<?php // $Id$
/*
  TODO/wishlist:
   - Get ISO-3166-1 (and -2??) data for countries (and states??)
   - implement a nicer theme for form, including dropdowns and stuff
   - widget settings to show/hide various fields (names, country, etc.)
   - Add field_settings:tables/arguments/filters for field components (zip, street, etc)
 */

/**
 * Implementation of FAPI hook_elements().
 */
function postal_field_elements() {
  return array(
    'postal_field' => array(
      '#input' => TRUE,
      '#columns' => array_keys(postal_database_columns()),
      '#delta' => 0,
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function postal_field_field_info() {
  return array(
    'postal' => array('label' => t('Postal Address')),
    'callbacks' => array(
      'tables' => CONTENT_CALLBACK_DEFAULT,
      'arguments' => CONTENT_CALLBACK_DEFAULT,
    ),
  );
}

/**
 * Implementation of hook_field().
 */
function postal_field_field($op, &$node, $field, &$node_field, $teaser, $page) {
  switch ($op) {
    case 'validate':
  }
}

function postal_field_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      return postal_database_columns();
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function postal_field_content_is_empty($item, $field) {
  foreach (array_keys(postal_database_columns()) as $key) {
    if (!empty($item[$key])) return FALSE;
  }
  return TRUE;
}

/**
 * Implementation of hook_widget_info().
 */
function postal_field_widget_info() {
  return array(
    'postal_field' => array(
      'label' => t('Address form'),
      'field types' => array('postal'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function postal_field_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => 'postal',
    '#postal_address' => (object) $items[$delta],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
  );
  return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function postal_field_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'Default',
      'field types' => array('postal'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function postal_field_theme() {
  return array(
    'postal_field_formatter_default' => array('element' => NULL),
  );
}

function theme_postal_field_formatter_default($element) {
  return theme('postal_address', (object) $element['#item']);
}
