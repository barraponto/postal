<?php // $Id$

/**
 * Implementation of hook_menu().
 */
function postal_menu() {
  module_load_include('menu.inc', 'postal', 'includes/postal');
  return postal_menu_menu();
}

/**
 * Implementation of hook_theme().
 */
function postal_theme() {
  module_load_include('theme.inc', 'postal', 'theme/postal');
  return postal_theme_theme();
}

/**
 * Implementation of hook_elements().
 */
function postal_elements() {
  return array(
    'postal' => array(
      '#input' => TRUE,
      '#process' => array('postal_process'),
    ),
    'postal_general' => array(
      '#input' => TRUE,
      '#process' => array('postal_general_process'),
    ),
  );
}

/**
 * An element #process callback for postal elements.
 */
function postal_process(&$element, $form_state) {
  if (!$settings = $element['#postal_settings']) $settings = array();
  $element['#tree'] = TRUE;

  $id = is_object($address) ? $address->id : $address;
  $id = check_plain($id);

  if (isset($element['#postal_address'])) {
    $address = postal_address($element['#postal_address']);
  }
  elseif (isset($element['#default_value'])) {
    $address = postal_address($element['#default_value']);
  }

  $country = $address->country;

  $element['#prefix'] = '<div class="postal-form">';
  $element['#suffix'] = '</div>';
  $element['street1'] = array(
    '#type' => 'textfield',
    '#title' => $element['#title'] ? $element['#title'] : t('Street Address'),
    '#default_value' => $address->street1,
    '#size' => 50,
    '#maxlength' => 75,
    '#required' => $element['#required'],
  );
  $element['street2'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => $address->street2,
    '#size' => 50,
    '#maxlength' => 75,
  );
  $element['locale'] = array(
    '#prefix' => '<div class="postal-locale">',
    '#suffix' => '</div><div style="clear: both"/>',
  );
  $element['locale']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => $address->city,
    '#size' => 15,
    '#maxlength' => 64,
    '#parents' => array_merge($element['#parents'], array('city')),
    '#required' => $element['#required'],
  );

  // We don't know if country has states.
  if (is_null($country->children)) {
    $element['locale']['state'] = array(
      '#type' => 'textfield',
      '#title' => t('State/Province'),
      '#default_value' => $address->state,
      '#parents' => array_merge($element['#parents'], array('state')),
      '#size' => 12,
      '#maxlength' => 64,
      '#required' => $element['#required'],
    );
  }
  elseif ($country->children > 0) {
    $element['locale']['state'] = array(
      '#type' => 'select',
      '#title' => t('State/Province'),
      '#default_value' => $address->state,
      '#parents' => array_merge($element['#parents'], array('state')),
      '#options' => postal_country_state_names($country->code),
      '#required' => $element['#required'],
    );
  }

  $element['locale']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Postal code'),
    '#default_value' => $address->zip,
    '#parents' => array_merge($element['#parents'], array('zip')),
    '#size' => 10,
    '#maxlength' => 20,
    '#required' => $element['#required'],
  );

  // Only show requested fields.
  if (isset($element['#postal_fields'])) {
    foreach ($element as $field => $val) {
      if (!in_array(''. $field, $element['#postal_fields'])) {
        $element[$field]['#access'] = FALSE;
      }
    }
  }

  // The title was used on the street1 field.  It's redundant now.
  if (isset($element['street1'])) unset($element['#title']);

  // "Required" was passed through to the sub-elements.
  unset($element['#required']);

  return $element;
}

/**
 * An element #process callback for postal_general elements.
 */
function postal_general_process(&$element, $form_state) {
  if (!$o = $element['#postal_settings']) $o = array();

  $address = postal_address($element['#value']);

  $element['#tree'] = TRUE;

  $countries = postal_country_names();

  // Respect any user-configured labels for these elements.
  $type_label = isset($o['type_label']) ? $o['type_label'] : $element['#title'];
  $country = isset($o['country_label']) ? $o['country_label'] : t('Country');
  $state   = isset($o['state_label']) ? $o['state_label'] : t('State/Province');
  $city    = isset($o['city_label']) ? $o['city_label'] : t('City');
  $zip     = isset($o['zip_label']) ? $o['zip_label'] : t('Postal code');

  // These are the types of granularity this input can support.
  $types = array(
    'country' => $country,
    'state'   => $state,
    'city'    => $city,
    'zip'     => $zip,
  );

  // Limit the granularity selection based on configuration settings.
  if (isset($o['selection_types'])) {
    foreach ($o['selection_types'] as $type => $status) {
      if (!$status) unset($types[$type]);
    }
  }

  // Set the default value if there's only one selected type.
  if (count($types == 1)) $address->type = current(array_keys($types));

  $element['type'] = array(
    '#type' => 'select',
    '#title' => $type_label,
    '#options' => $types,
    '#default_value' => $address->type,
    '#required' => $element['#required'],
    '#access' => (count($types) > 1),
  );
  $element['country'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#options' => $countries,
    '#title' => $country,
    '#default_value' => $address->country,
    '#required' => $element['#required'],
    '#ahah' => array(
      'path' => 'postal/js/postal_ahah/'. join('/', $element['#array_parents']),
      'wrapper' => $element['#id'] .'-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  if ($address->country) {
    $country = postal_country_load($address->country);
    if (is_null($country->children)) {
     $element['locale']['state'] = array(
       '#type' => 'textfield',
       '#title' => $state,
       '#default_value' => $address->state,
       '#parents' => array_merge($element['#parents'], array('state')),
       '#size' => 12,
       '#maxlength' => 64,
       '#required' => $element['#required'],
       '#access' => isset($types['state']),
     );
    }
    elseif ($country->children > 0) {
     $element['locale']['state'] = array(
       '#type' => 'select',
       '#title' => $state,
       '#default_value' => $address->state,
       '#parents' => array_merge($element['#parents'], array('state')),
       '#options' => postal_country_state_names($country->code),
       '#required' => $element['#required'],
       '#access' => isset($types['state']),
     );
    }
    $element['city'] = array(
      '#type' => 'textfield',
      '#title' => $city,
      '#default_value' => $address->city,
      '#size' => 15,
      '#maxlength' => 64,
      '#required' => $element['#required'],
      '#access' => isset($types['city']),
    );
    $element['zip'] = array(
      '#type' => 'textfield',
      '#title' => $zip,
      '#default_value' => $address->zip,
      '#size' => 10,
      '#maxlength' => 20,
      '#required' => $element['#required'],
      '#access' => isset($types['zip']),
    );
  }

  return $element;
}

/**
 * API Function: recommended database columns for any table that stores 
 * addresses.
 */
function postal_database_columns() {
  return array(
    'type'    => array(
      'type' => 'varchar', 'length' => 100, 'sortable' => TRUE
     ),
    'name'    => array(
      'type' => 'varchar', 'length' => 100, 'sortable' => TRUE
     ),
    'street1' => array(
      'type' => 'varchar', 'length' => 64, 'sortable' => FALSE
     ),
    'street2' => array(
      'type' => 'varchar', 'length' => 64, 'sortable' => FALSE
    ),
    'zip'     => array(
      'type' => 'varchar', 'length' => 10, 'sortable' => TRUE
     ),
    'city'    => array(
      'type' => 'varchar', 'length' => 32, 'sortable' => TRUE
    ),
    'state'   => array(
      'type' => 'varchar', 'length' => 32, 'sortable' => TRUE
     ),
    'country' => array(
      'type' => 'varchar', 'length' => 2, 'sortable' => TRUE
    ),
  );
}

/**
 * API Function: return an address objet, formatted as postal would expect
 * to find it.
 */
function postal_address($address = NULL, $id = NULL, $values = array()) {
  $fields = array_keys(postal_database_columns());

  if (!$address) {
    $address = new stdClass();
    $address->id = $id ? $id : 'default';
  }
  else {
    if (isset($address['#item'])) $address = $address['#item'];
    $address = (object) $address;
  }
  
  $address->empty = TRUE;
  
  foreach ($fields as $field) {
    if (!array_key_exists($field, $address)) {
      $address->$field = '';
    }
    elseif ($address->$field) $address->empty = FALSE;
  }

  return $address;
}

function postal_country_load($countries = NULL, $scope = NULL, $reset = FALSE) {
  static $cache = array();
  if ($reset) $cache = array();

  $result = $fetch = array();

  // If a single value is passed, only return a single result.
  if (!$countries) {
    $all = TRUE;
  }
  elseif (!is_array($countries)) {
    $single = TRUE;
    $countries = array($countries);
  }

  // Decide whether to pull from our static cache or build a query.
  if (is_array($countries)) {
    foreach ($countries as $country) {
      if (isset($cache[$country])) {
        $result[$country] = $cache[$country];
      }
      else {
        // Add the country to the result array to preserve ordering.
        $result[$country] = array();
        $fetch[] = check_plain($country);
      }
    }
  }

  if ($all || $fetch) {
    $filter = $fetch ? "AND c.code IN ('". join("', '", $fetch) ."')" : "";

    if ($scope) {
      $res = db_query("SELECT c.* FROM {postal} c, {postal_admin} a
        WHERE a.id = c.id
        AND a.status = 1
        AND c.type = 'country' $filter ORDER BY a.weight, c.name");
    }
    else {
      $res = db_query("SELECT c.* FROM {postal} c
        WHERE c.type = 'country' $filter ORDER BY c.name");
    }

    while ($row = db_fetch_object($res)) {
      $result[$row->code] = $cache[$row->code] = $row;
    }
  }

  if ($single) return current($result);
  return $result;
}

function postal_country_states($countries = array(), $scope = NULL) {
  static $cache = array();
  $result = $fetch = $info = array();

  // If a single value is passed, only return a single result.
  if (!is_array($countries)) {
    $single = TRUE;
    $countries = array($countries);
  }

  foreach ($countries as $country) {
    if (isset($cache[$country])) {
      $result[$country] = $cache[$country];
    }
    else {
      // Add the country to the result array to preserve ordering.
      $result[$country] = $cache[$country] = array();
      $fetch[] = check_plain($country);
    }
  }

  if ($fetch) {
    $filter = "AND c.code IN ('". join("', '", $fetch) ."')";

    // If we have received a "scope" argument, filter and weight results
    // according to the configuration for that scope.
    if ($scope) {
      $scope = check_plain($scope);
      $sql = "SELECT s.*, c.code AS country 
        FROM {postal} s, {postal} c, {postal_admin} a
        WHERE a.id = s.id
        AND a.scope = '$scope'
        AND s.parent_id = c.id
        AND s.type = 'state' AND c.type = 'country' $filter
        AND a.status = 1
        ORDER BY s.parent_id, a.weight, s.name";
    }

    // Include all entries.
    else {
      $sql = "SELECT s.*, c.code AS country 
        FROM {postal} s, {postal} c
        WHERE s.parent_id = c.id
        AND s.type = 'state' AND c.type = 'country' $filter
        ORDER BY s.parent_id, s.name";
    }
    $res = db_query($sql);

    while ($row = db_fetch_object($res)) {
      $result[$row->country][$row->code] = $cache[$row->country][$row->code] = $row;
    }

  }

  if ($single) return current($result);
  return $result;
}

function postal_country_names($countries = NULL, $scope = NULL) {
  $names = array();
  foreach (postal_country_load($countries, $scope) as $country) {
    $names[$country->code] = $country->name;
  }
  return $names;
}

function postal_country_state_names($country, $scope = NULL) {
  $names = array();
  foreach (postal_country_states($country, $scope) as $state) {
    $names[$state->code] = $state->name;
  }
  return $names;
}

/**
 * API function: expand the state and/or country codes in an address object
 * to their full names, if available.
 */
function postal_set_names($address) {
  if ($address->state) {
    $names = postal_country_state_names($address->country);
    if (isset($names[$address->state])) $address->state = $names[$address->state];
  }
  if ($address->country && $country = postal_country_load($address->country)) {
    $address->country = $country->name;
  }
  return $address;
}
