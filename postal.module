<?php // $Id$

/**
 * Implementation of hook_elements().
 */
function postal_elements() {
  return array(
    'postal' => array('#input' => TRUE, '#process' => array('postal_element' => array())),
  );
}

/**
 *
 */
function postal_address($address=null, $id=null, $values=array()) {
  $fields = array_keys(postal_database_columns());

  if (!$address) {
    $address = new stdClass();
    $address->id = $id ? $id : 'default';
  }
  else {
    $address = (object) $address; // MARK - address might be a string according to postal_form
  }
  
  $address->empty = true;
  
  foreach ($fields as $field) {
    if (!array_key_exists($field, $address)) {
      $address->$field = '';
    }
    elseif ($address->$field) $address->empty = false;
  }

  return $address;
}

function postal_element(&$element) {
  $element['#tree'] = TRUE;

  $id = is_object($address) ? $address->id : $address;
  $id = check_plain($id);

  if (isset($element['#postal_address'])) {
    $address = postal_address($element['#postal_address']);
  }
  $element['street1'] = array(
    '#type' => 'textfield',
    '#title' => t('Street Address'),
    '#default_value' => $address->street1,
    '#size' => 50,
    '#maxlength' => 75,
    '#required' => $address->required,
  );
  $element['street2'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => $address->street2,
    '#size' => 50,
    '#maxlength' => 75,
    '#required' => false,
  );
  $element['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => $address->city,
    '#size' => 30,
    '#maxlength' => 64,
    '#required' => $address->required,
  );
  $element['state'] = array(
    '#type' => 'textfield',
    '#title' => t('State / Province'),
    '#default_value' => $address->state,
    '#size' => 30,
    '#maxlength' => 64,
  );
  $element['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip / Postal Code'),
    '#default_value' => $address->zip,
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => $address->required,
  );

  // Only show requested fields.
  if (isset($element['#postal_fields'])) {
    foreach ($element as $field => $val) {
      if (!in_array(''. $field, $element['#postal_fields'])) unset($element[$field]);
    }
  }
  return $element;
}

function postal_database_columns() {
  return array(
    'type'    => array('type' => 'varchar', 'length' => 100, 'sortable' => true),
    'name'    => array('type' => 'varchar', 'length' => 100, 'sortable' => true),
    'street1' => array('type' => 'varchar', 'length' => 64, 'sortable' => false),
    'street2' => array('type' => 'varchar', 'length' => 64, 'sortable' => false),
    'zip'     => array('type' => 'varchar', 'length' => 10, 'sortable' => true),
    'city'    => array('type' => 'varchar', 'length' => 32, 'sortable' => true),
    'state'   => array('type' => 'varchar', 'length' => 32, 'sortable' => true),
    'country' => array('type' => 'varchar', 'length' => 2, 'sortable' => true),
  );
}

function theme_postal($element) {
  return theme('form_element', $element, $element['#children']);
}

function theme_postal_address($address) {
  $address = (object) $address;
  $out = '';
  if ($address->name)        $out .= $address->name;
  if ($address->street1)     $out .= '<br />'. $address->street1;
  if ($address->street2)     $out .= '<br />'. $address->street2;
  if ($address->city || $address->state || $address->zip) $out .= '<br />';
  if ($address->city)        $out .= $address->city .', ';
  if ($address->state)       $out .= $address->state .' ';
  if ($address->zip)         $out .= $address->zip;
  if ($address->country)     $out .= '<br />'. $address->country;
  
  return $out;
}
