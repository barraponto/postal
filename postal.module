<?php
/*
  TODO/wishlist:
   - doesn't appear to be saving entries appropriately
   - Get ISO-3166-1 (and -2??) data for countries (and states??)
   - implement a nicer theme for form, including dropdowns and stuff
   - widget settings to show/hide various fields (names, country, etc.) 
   - Add field_settings:tables/arguments/filters for field components (zip, street, etc)
*/

function postal_field_info() {
  return array(
    'postal' => array('label' => t('Postal Address')),
  );
}

function postal_field($op, &$node, $field, &$node_field, $teaser, $page) {
  switch ($op) {
    case 'validate':
  }
}

function postal_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      return postal_field_list();
  }
}

function postal_widget_info() {
  return array(
    'postal' => array(
      'label' => t('Address form'),
      'field types' => array('postal'),
    ),
  );
}

function postal_widget($op, &$node, $field, &$node_field) {
  switch ($op) {
    case 'form':
      $name = $field['field_name'];
      $form = postal_form($name, $fields=array(), $node_field);
      $form['#type'] = 'fieldset';
      $form['#tree'] = true;
      $form['#title'] = $field['widget']['label'];

      return array( $field['field_name'] => $form );
  }
}

function postal_field_list() {
  $fields = array(
    'type'       => array('type' => 'varchar', 'length' => 100, 'sortable' => true),
    'name'       => array('type' => 'varchar', 'length' => 100, 'sortable' => true),
    'first_name' => array('type' => 'varchar', 'length' => 100, 'sortable' => true),
    'last_name'  => array('type' => 'varchar', 'length' => 100, 'sortable' => true),
    'street1'    => array('type' => 'varchar', 'length' => 64, 'sortable' => false),
    'street2'    => array('type' => 'varchar', 'length' => 64, 'sortable' => false),
    'zip'        => array('type' => 'varchar', 'length' => 10, 'sortable' => true),
    'city'       => array('type' => 'varchar', 'length' => 32, 'sortable' => true),
    'state'      => array('type' => 'varchar', 'length' => 32, 'sortable' => true),
    'country'    => array('type' => 'varchar', 'length' => 2, 'sortable' => true),
  );
  return $fields;
}

/* 
 *
 */
function postal_address(&$address, $id=null, $values=array()) {
  $fields = array_keys(postal_field_list());

  if (!$address) {
    $address = new stdClass();
    $address->id = $id ? $id : 'default';
  }
  else {
    $address = (object) $address;
  }
  
  $address->empty = true;
  
  foreach ($fields as $field) {
    if(!array_key_exists($field, $address)) {
      $address->$field = '';
    }
    elseif($address->$field) $address->empty = false;
  }

  foreach($values as $key => $val) {
    if (($field = str_replace('postal_'.$id.'_', '', $key)) != $key) {
      if (in_array($field, $fields)) {
        $address->$field = $val;
      }
    }
  }

  return $address;
}

function postal_form(&$address, $fields=array(), $values=array()) {
  // TODO - do we still need to be cognizant of the id?  Or just assume
  // that the calling code to keep track of its own stuff?

  $id = is_object($address) ? $address->id : $address;
  $id = check_plain($id);

  // initialize the address 
  postal_address($address, $address->id, $values);

  $form = array();
  $form['address'] = array(
    '#type' => 'value',
    '#value' => $address,
  );
  $form['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#default_value' => $address->first_name,
    '#size' => 50,
    '#maxlength' => 75,
    '#required' => $address->required,
  );
  $form['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#default_value' => $address->last_name,
    '#size' => 50,
    '#maxlength' => 75,
    '#required' => $address->required,
  );
  $form['street1'] = array(
    '#type' => 'textfield',
    '#title' => t('Street Address'),
    '#default_value' => $address->street1,
    '#size' => 50,
    '#maxlength' => 75,
    '#required' =>  $address->required,
  );
  $form['street2'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => $address->street2,
    '#size' => 50,
    '#maxlength' => 75,
    '#required' => false,
  );
  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => $address->city,
    '#size' => 30,
    '#maxlength' => 64,
    '#required' => $address->required,
  );
  $form['state'] = array(
    '#type' => 'textfield',
    '#title' => t('State / Province'),
    '#default_value' => $address->state,
    '#size' => 30,
    '#maxlength' => 64,
  );
  $form['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip / Postal Code'),
    '#default_value' => $address->zip,
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => $address->required,
  );

  // only show requested fields
  if ($fields) {
    foreach($form as $field => $val) {
      if(!in_array(''.$field, $fields)) unset($form[$field]);
    }
  }
  return $form;
}

function theme_postal_address($address) {
  $out = '';
  if($address->name)        $out .= $address->name;
  if($address->first_name)  $out .= $address->first_name.' ';
  if($address->last_name)   $out .= ' '.$address->last_name;
  if($address->street1)     $out .= '<br />'.$address->street1;
  if($address->street2)     $out .= '<br />'.$address->street2;
  if($address->city || $address->state || $address->zip) $out .= '<br />';
  if($address->city)        $out .= $address->city . ', ';
  if($address->state)       $out .= $address->state . ' ';
  if($address->zip)         $out .= $address->zip;
  if($address->country)     $out .= '<br />'.$address->country;
  
  return $out;
}    
